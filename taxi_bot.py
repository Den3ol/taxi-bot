import os
import logging
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from starlette.responses import Response
from contextlib import asynccontextmanager

from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import Message, BotCommand, Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import CommandStart, Command

# 1. –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))
WEBHOOK_SECRET = os.getenv("cheongjutaxi")
WEBHOOK_PATH = f"/webhook/{WEBHOOK_SECRET}"
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())


# 4. Lifespan
@asynccontextmanager
async def lifespan(app: FastAPI):
    await bot.set_webhook(WEBHOOK_URL)
    await bot.set_my_commands([
        BotCommand(command="start", description="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"),
        BotCommand(command="contact", description="üìû –ö–æ–Ω—Ç–∞–∫—Ç"),
        BotCommand(command="info", description="‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ")
    ])
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", WEBHOOK_URL)

    yield
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.session.close()


# 5. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(lifespan=lifespan)


# 6. Webhook-–æ–±—Ä–∞–±–æ—Ç–∫–∞
@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    body = await request.body()
    logging.info(f"üì© –ü–æ–ª—É—á–µ–Ω webhook: {body.decode()}")
    update = Update.model_validate_json(body.decode())
    await dp.feed_update(bot, update)
    return Response(status_code=200)


# 7. –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="–¢–∞–∫—Å–∏ üöï")],
    [KeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞ üôµ")],
    [KeyboardButton(text="–¢—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å üòá")],
    [KeyboardButton(text="–ü–µ—Ä–µ–≥–æ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—è üöó")]
], resize_keyboard=True)

request_buttons = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
    [KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
    [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
], resize_keyboard=True, one_time_keyboard=True)

# 8. –•—Ä–∞–Ω–∏–ª–∏—â–µ
user_data = {}


# 9. –•–µ–Ω–¥–ª–µ—Ä—ã
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=menu
    )


@dp.message(F.text.in_({"–¢–∞–∫—Å–∏ üöï", "–î–æ—Å—Ç–∞–≤–∫–∞ üôµ", "–¢—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å üòá", "–ü–µ—Ä–µ–≥–æ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—è üöó"}))
async def select_service(message: Message):
    user_data[message.from_user.id] = {"service": message.text}
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=request_buttons)


@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message):
    user_data.pop(message.from_user.id, None)
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=menu)


@dp.message(F.location)
async def handle_location(message: Message):
    user_data.setdefault(message.from_user.id, {})["location"] = message.location
    await check_and_notify(message)


@dp.message(F.contact)
async def get_contact(message: Message):
    user_data.setdefault(message.from_user.id, {})["phone"] = message.contact.phone_number
    await check_and_notify(message)


async def check_and_notify(message: Message):
    user_id = message.from_user.id
    data = user_data.get(user_id, {})
    if "location" in data and "phone" in data:
        loc = data["location"]
        phone = data["phone"]
        service = data["service"]
        user = message.from_user

        kakao_link = f"https://map.kakao.com/link/map/{loc.latitude},{loc.longitude}"
        msg = (
            f"<b>üö® –ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n"
            f"<b>–£—Å–ª—É–≥–∞:</b> {service}\n"
            f"<b>–ò–º—è:</b> {user.full_name}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{phone}</code>\n"
            f"<b>Username:</b> @{user.username if user.username else '‚Äî'}\n"
            f"<b>–õ–æ–∫–∞—Ü–∏—è (KakaoMap):</b> <a href=\"{kakao_link}\">üìç –û—Ç–∫—Ä—ã—Ç—å</a>\n"
            f"<b>User ID:</b> <code>{user.id}</code>"
        )
        await bot.send_message(chat_id=GROUP_ID, text=msg, disable_web_page_preview=True)
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.",
                             reply_markup=ReplyKeyboardRemove())
        user_data.pop(user_id, None)


@dp.message(Command("contact"))
async def contact_info(message: Message):
    await message.answer("üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä: +82 10-4307-1105", reply_markup=menu)


@dp.message(Command("info"))
async def info(message: Message):
    await message.answer(
        "üöñ Taxi Cheongju ‚Äî –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è —Å–ª—É–∂–±–∞ –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏, –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç—Ä–µ–∑–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –≤ –≥–æ—Ä–æ–¥–µ –ß—Ö–æ–Ω–¥–∂—É.",
        reply_markup=menu)


@dp.message()
async def unknown(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é:", reply_markup=menu)
