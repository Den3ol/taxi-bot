import logging
import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
GROUP_ID = -1002701798085  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –≥—Ä—É–ø–ø—ã

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–¢–∞–∫—Å–∏ üöï")],
        [KeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞ üõµ")],
        [KeyboardButton(text="–¢—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å üòá")],
        [KeyboardButton(text="–ü–µ—Ä–µ–≥–æ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—è üöó")]
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
request_buttons = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
        [KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
user_data = {}

@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=menu
    )

@dp.message(F.text.in_({"–¢–∞–∫—Å–∏ üöï", "–î–æ—Å—Ç–∞–≤–∫–∞ üõµ", "–¢—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å üòá", "–ü–µ—Ä–µ–≥–æ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—è üöó"}))
async def service_selected(message: Message):
    user_id = message.from_user.id
    user_data[user_id] = {"service": message.text}
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=request_buttons
    )

@dp.message(F.location)
async def handle_location(message: Message):
    user_id = message.from_user.id
    if user_id in user_data:
        user_data[user_id]["location"] = message.location
    await check_and_notify(message)

@dp.message(F.contact)
async def handle_contact(message: Message):
    user_id = message.from_user.id
    if user_id in user_data:
        user_data[user_id]["phone"] = message.contact.phone_number
    await check_and_notify(message)

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_menu(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=menu)
    user_data.pop(message.from_user.id, None)

async def check_and_notify(message: Message):
    user_id = message.from_user.id
    data = user_data.get(user_id, {})

    if "location" in data and "phone" in data:
        loc = data["location"]
        service = data["service"]
        phone = data["phone"]
        user = message.from_user

        msg = f"""
üö® <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>
<b>–£—Å–ª—É–≥–∞:</b> {service}
<b>–ò–º—è:</b> {user.full_name}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{phone}</code>
<b>Username:</b> @{user.username if user.username else '‚Äî'}
<b>–õ–æ–∫–∞—Ü–∏—è:</b> üìç https://www.google.com/maps?q={loc.latitude},{loc.longitude}
<b>User ID:</b> <code>{user.id}</code>
"""

        await bot.send_message(GROUP_ID, msg)
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.", reply_markup=ReplyKeyboardRemove())
        user_data.pop(user_id, None)

# –ö–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é
@dp.message(Command("order"))
async def handle_order(message: Message):
    await message.answer("–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–¢–∞–∫—Å–∏ üöï¬ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ.")

@dp.message(Command("sobriety"))
async def handle_sobriety(message: Message):
    await message.answer("–ß—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å —Ç—Ä–µ–∑–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è, –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–¢—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å üòá¬ª.")

@dp.message(Command("price"))
async def handle_price(message: Message):
    await message.answer("–¶–µ–Ω—ã –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –∏ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫. –£—Ç–æ—á–Ω–∏—Ç–µ —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.")

@dp.message(Command("contact"))
async def handle_contact_cmd(message: Message):
    await message.answer("üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä: +82 10-4307-1105\n–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞.")

@dp.message(Command("info"))
async def handle_info(message: Message):
    await message.answer("üöñ Taxi Cheongju ‚Äî –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è —Å–ª—É–∂–±–∞ –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏, –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç—Ä–µ–∑–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –≤ –≥–æ—Ä–æ–¥–µ –ß—Ö–æ–Ω–¥–∂—É.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
