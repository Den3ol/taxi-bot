import logging
import asyncio
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    ReplyKeyboardRemove, BotCommand
)
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
GROUP_ID = int(os.getenv("GROUP_ID"))

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–¢–∞–∫—Å–∏ üöï")],
        [KeyboardButton(text="–î–æ—Å—Ç–∞–≤–∫–∞ üõµ")],
        [KeyboardButton(text="–¢—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å üòá")],
        [KeyboardButton(text="–ü–µ—Ä–µ–≥–æ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—è üöó")]
    ],
    resize_keyboard=True
)

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
request_buttons = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)],
        [KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
user_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}!\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=menu
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
@dp.message(F.text.in_({"–¢–∞–∫—Å–∏ üöï", "–î–æ—Å—Ç–∞–≤–∫–∞ üõµ", "–¢—Ä–µ–∑–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å üòá", "–ü–µ—Ä–µ–≥–æ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—è üöó"}))
async def select_service(message: Message):
    user_data[message.from_user.id] = {"service": message.text}
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=request_buttons
    )

# –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main(message: Message):
    user_data.pop(message.from_user.id, None)
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@dp.message(F.location)
async def handle_location(message: Message):
    user_id = message.from_user.id
    location = message.location

    if user_id in user_data:
        user_data[user_id]["location"] = location

    await check_and_notify(message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(F.contact)
async def get_contact(message: Message):
    user_id = message.from_user.id
    if user_id in user_data:
        user_data[user_id]["phone"] = message.contact.phone_number
    await check_and_notify(message)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
async def check_and_notify(message: Message):
    user_id = message.from_user.id
    data = user_data.get(user_id, {})

    if "location" in data and "phone" in data:
        loc = data["location"]
        phone = data["phone"]
        service = data["service"]
        user = message.from_user

        latitude = loc.latitude
        longitude = loc.longitude
        kakao_link = f"https://map.kakao.com/link/map/{latitude},{longitude}"

        msg = (
            f"<b>üö® –ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n"
            f"<b>–£—Å–ª—É–≥–∞:</b> {service}\n"
            f"<b>–ò–º—è:</b> {user.full_name}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{phone}</code>\n"
            f"<b>Username:</b> @{user.username if user.username else '‚Äî'}\n"
            f"<b>–õ–æ–∫–∞—Ü–∏—è (KakaoMap):</b> <a href=\"{kakao_link}\">üìç –û—Ç–∫—Ä—ã—Ç—å</a>\n"
            f"<b>User ID:</b> <code>{user.id}</code>"
        )

        await bot.send_message(chat_id=GROUP_ID, text=msg, disable_web_page_preview=True)
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.", reply_markup=ReplyKeyboardRemove())
        user_data.pop(user_id, None)

# –ö–æ–º–∞–Ω–¥—ã
@dp.message(Command("contact"))
async def contact_info(message: Message):
    await message.answer("üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä: +82 10-4307-1105", reply_markup=menu)

@dp.message(Command("info"))
async def info(message: Message):
    await message.answer("üöñ Taxi Cheongju ‚Äî –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–∞—è —Å–ª—É–∂–±–∞ –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏, –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Ç—Ä–µ–∑–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è –≤ –≥–æ—Ä–æ–¥–µ –ß—Ö–æ–Ω–¥–∂—É.", reply_markup=menu)

@dp.message()
async def unknown(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é:", reply_markup=menu)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
async def set_bot_commands():
    await bot.set_my_commands([
        BotCommand(command="start", description="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="contact", description="üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä"),
        BotCommand(command="info", description="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
    ])

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
async def main():
    await set_bot_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

